{"meta":{"session":{"oRfyxdhyBesR":{"fetched":true,"fetching":false,"submitting":false,"submitted":false}}},"results":[],"sessions":[{"sessionId":"oRfyxdhyBesR","resultId":"z0tYvnU83w91","testId":"f93m41bf","test":{"questions":[{"id":"dedd8b2d-de10-4874-a304-620a52dc5d4e","statement":"Pick the solution that makes the most sense.","answers":[{"id":"2df1ca14-6828-405f-b8c7-fe933fc740b0","type":"js","content":"function wrapItems(items) {\n  const envelopes = [];\n  let counter = 0;\n  for (const item of items) {\n    const envelope = {\n      id: counter++,\n      item,\n    };\n    envelopes.push(envelope);\n  }\n  return envelopes;\n}\n\nmodule.exports = wrapItems;"},{"id":"962fc99b-b177-4c34-ae3f-c298005fb866","type":"js","content":"function wrapItems(items) {\n  let envelopes = [];\n  let counter = 0;\n  for (let item of items) {\n    let envelope = {\n      id: counter++,\n      item,\n    };\n    envelopes.push(envelope);\n  }\n  return envelopes;\n}\n\nmodule.exports = wrapItems;"}]},{"id":"6cdee857-4e3d-418a-bb1a-3866d719adb1","statement":"Pick the solution that performs the best.","answers":[{"id":"20eed2ec-84f6-4c22-8758-37a5a2053c8d","type":"js","content":"function createFibonacci() {\n  const memo = new Map([[0, 0], [1, 1]]);\n\n  return function fibonacci(n) {\n    if (!memo.has(n)) {\n      memo.set(n, fibonacci(n - 1) + fibonacci(n - 2));\n    }\n    return memo.get(n);\n  };\n}\n\nmodule.exports = createFibonacci();"},{"id":"123b6ef7-eb2d-4075-b139-77ce0d74abc7","type":"js","content":"function fibonacci(n) {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nmodule.exports = fibonacci;"}]},{"id":"193c9c31-0de7-4ea3-b4f1-45469adec97f","statement":"Pick the solution that performs the best.","answers":[{"id":"1e8c2963-0d81-490a-8cb7-2893e223881f","type":"js","content":"async function loadData(api) {\n  const foo = api.getFoo();\n  const bar = api.getBar();\n  return {\n    foo: await foo,\n    bar: await bar,\n  };\n}\n\nmodule.exports = loadData;"},{"id":"dfb5167e-0179-4d35-abb8-cd9abc1e8e71","type":"js","content":"async function loadData(api) {\n  const foo = await api.getFoo();\n  const bar = await api.getBar();\n  return { foo, bar };\n}\n\nmodule.exports = loadData;"}]},{"id":"acbe1112-e7f7-4781-9780-90ccf6188a13","statement":"Pick the solution that scales best.","answers":[{"id":"7cf7646d-3f3e-4ae2-9691-90a6dc344f20","type":"js","content":"function uniqify(numbers) {\n  const unique = [];\n  const mem = Object.create(null);\n  for (const number of numbers) {\n    if (!mem[number]) {\n      unique.push(number);\n      mem[number] = true;\n    }\n  }\n  return unique;\n}\n\nmodule.exports = uniqify;"},{"id":"936d5876-df19-4776-9b66-85ae8ca2c6f4","type":"js","content":"function uniqify(numbers) {\n  const unique = [];\n  for (const number of numbers) {\n    if (!unique.includes(number)) {\n      unique.push(number);\n    }\n  }\n  return unique;\n}\n\nmodule.exports = uniqify;"}]},{"id":"027edc73-9c7f-4f8b-8291-1109c0d43d1e","statement":"Pick the solution that makes most sense.","answers":[{"id":"5230b51d-8047-4232-8dea-7b74c0556f65","type":"js","content":"function extractProperty(key) {\n  return function extract(object) {\n    return object[key];\n  };\n}\n\nmodule.exports = extractProperty;"},{"id":"e0b9bb77-2d84-4159-9a8b-31c2bea5bb6a","type":"js","content":"class PropExtractor {\n  constructor(key) {\n    this.key = key;\n  }\n\n  extract(object) {\n    return object[this.key];\n  }\n}\n\nmodule.exports = PropExtractor;"}]},{"id":"578d636b-aae6-4253-8580-8c181a5fd90b","statement":"Pick the simplest solution that returns a new array with only unique items in it.","answers":[{"id":"9fd08336-b85b-43fe-b76e-3c47a6655aaf","type":"js","content":"function uniqify(numbers) {\n  const unique = [];\n  const mem = Object.create(null);\n  for (const number of numbers) {\n    if (!mem[number]) {\n      unique.push(number);\n      mem[number] = true;\n    }\n  }\n  return unique;\n}\n\nmodule.exports = uniqify;"},{"id":"1578df08-7cf7-4a72-bfee-fae8625d1af4","type":"js","content":"function uniqify(numbers) {\n  const unique = [];\n  const mem = Object.create(null);\n  for (const number of numbers) {\n    if (!mem[number]) {\n      unique.push(number);\n      mem[number] = true;\n    }\n  }\n  return unique;\n}\n\nmodule.exports = uniqify;"}]}]},"answers":{"dedd8b2d-de10-4874-a304-620a52dc5d4e":{"answerId":null,"comment":null},"6cdee857-4e3d-418a-bb1a-3866d719adb1":{"answerId":null,"comment":null},"193c9c31-0de7-4ea3-b4f1-45469adec97f":{"answerId":null,"comment":null},"acbe1112-e7f7-4781-9780-90ccf6188a13":{"answerId":null,"comment":null},"027edc73-9c7f-4f8b-8291-1109c0d43d1e":{"answerId":null,"comment":null},"578d636b-aae6-4253-8580-8c181a5fd90b":{"answerId":null,"comment":null}}}]}
